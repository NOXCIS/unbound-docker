name: docker

on:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_PASSWORD:
        required: false
    inputs:
      images:
        type: string
        required: true
      working_directory:
        type: string
        required: false
      context:
        type: string
        required: false
      dockerfile:
        type: string
        required: false
      target:
        type: string
        required: false
      cache_from:
        type: string
        required: false
      platforms:
        type: string
        required: false
      publish:
        type: boolean
        required: false

jobs:

  matrix:
    runs-on: ubuntu-latest

    outputs:
      platforms: ${{ steps.platforms.outputs.build }}

    steps:

      - id: platforms
        uses: kanga333/json-array-builder@v0.1.0
        with:
          str: ${{ inputs.platforms || 'linux/amd64' }}
          separator: "newline"

  test:
    runs-on: ubuntu-latest
    needs: [ matrix ]

    defaults:
      run:
        working-directory: ${{ inputs.working_directory || '.' }}

    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(needs.matrix.outputs.platforms) }}

    env:
      TEST_TAG: sut:latest

    steps:

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: /tmp/cache
          key: buildx-cache

      - id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.images }}
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}

      - id: build
        uses: docker/build-push-action@v3
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=local,dest=/tmp/cache
          cache-from: |
            type=gha
            ${{ steps.meta.outputs.tags }}
            ${{ inputs.cache_from }}
            type=local,src=/tmp/cache
          context: ${{ inputs.context }}
          target: ${{ inputs.target }}
          tags: ${{ env.TEST_TAG }}
          push: false
          load: true

      - run: |
          docker compose -f docker-compose.yml -f docker-compose.test.yml up --no-build --exit-code-from sut

  deploy:
    runs-on: ubuntu-latest
    needs: [ matrix, test ]
    if: ${{ inputs.publish == true }}

    steps:

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - uses: actions/cache@v3
        with:
          path: /tmp/cache
          key: buildx-cache

      - id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.images }}
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}

      - uses: docker/login-action@v2
        if: ${{ contains(inputs.images, 'ghcr.io') }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/login-action@v2
        if: ${{ contains(inputs.images, 'docker.io') }}
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v3
        with:
          platforms: ${{ inputs.platforms }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=gha,mode=max
          cache-from: |
            type=gha
            ${{ steps.meta.outputs.tags }}
            ${{ inputs.cache_from }}
            type=local,src=/tmp/cache
          context: ${{ inputs.context }}
          target: ${{ inputs.target }}
          tags: ${{ steps.meta.outputs.tags }}
          push: ${{ inputs.publish == true }}

      - uses: peter-evans/dockerhub-description@v3
        if: ${{ contains(inputs.images, 'docker.io') && github.event_name != 'pull_request' }} 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ fromJSON(needs.inputs.outputs.json).sut }}
